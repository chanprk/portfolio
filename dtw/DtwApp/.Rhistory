glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/ARM", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/ULVR", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/HSBA", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/VOD", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/MKS", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
USDGBP = Quandl("BOE/XUDLGBD", api_key="ztWex4DbrD4CVMdSvbcx")
USDGBP.ts = xts(USDGBP$Value,order.by = USDGBP$Date)
GSK.all = Quandl("LSE/TSCO", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
install.packages('dtwclust')
install.packages('dtwclust',type='source')
install.packages('dtwclust')
install.packages("dtwclust")
shiny::runApp()
rep('gray',10)
paste(rep('gray',10), 41:50)
paste(rep('gray',10), 41:50, sep="")
runApp()
runApp()
seq(41,60,by=2)
runApp()
cont <- read.csv('FTSE100.csv')
head(cont)
split(cont, cont$ticker)
split(cont, cont$ticker)
split(cont, cont$ticker)[['WTB']]
split(cont, cont$ticker)[['WTB']][2]
runApp()
split(cont, cont$ticker)[['WTB']][2]
split(cont, cont$ticker)[['WTB']][2]+1
split(cont, cont$ticker)[['WTB']][2]
as.character(split(cont, cont$ticker)[['WTB']][2])
split(cont, cont$ticker)[['WTB']][3]
split(cont, cont$ticker)[['WTB']][2]
split(cont, cont$ticker)[['WTB']][2][['name']]
split(cont, cont$ticker)[['WTB']][2]
components <- read.csv('FTSE100.csv')
name_dict <- split(components, components$ticker)
name_dict[['BP']]
class(name_dict[['BP']])
class(name_dict[['BP']])$name
as.character(name_dict[['BP']])
as.character(name_dict[['BP']][['name']])
as.character(name_dict[['GSK']][['name']])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
topmems <- readRDS('topmems_by_prices.RData')
symbol <- topmems[[1]]$topten[1]
serie <- prices[,symbol]
prices <- readRDS('FTSE100XTS.RData')
symbol <- topmems[[1]]$topten[1]
serie <- prices[,symbol]
plot( serie / as.numeric(serie[1]),  type='n', main="",ylab="Price", ylim=params[[clust_id]]$ylim)
params = list()
params[[1]] = list()
params[[1]][['selected']] = c(1:3,5,10)
params[[1]][['ylim']] = c(0.9, 1.25)
params[[2]] = list()
params[[2]][['selected']] = c(1,3,4,7,9)
params[[2]][['ylim']] = c(0.75, 1.2)
params[[3]] = list()
params[[3]][['selected']] = c(1:5,7,9)
params[[3]][['ylim']] = c(0.95, 1.3)
params[[4]] = list()
params[[4]][['selected']] = 1:9
params[[4]][['ylim']] = c(0.85, 1.5)
params[[5]] = list()
params[[5]][['selected']] = c(3:5,7:10)
params[[5]][['ylim']] = c(0.7, 1.25)
params[[6]] = list()
params[[6]][['selected']] = c(1,2,4)
params[[6]][['ylim']] = c(0.80, 1.20)
plot( serie / as.numeric(serie[1]),  type='n', main="",ylab="Price", ylim=params[[clust_id]]$ylim)
plot( serie / as.numeric(serie[1]),  type='n', main="",ylab="Price", ylim=params[[1]]$ylim)
abline(v=index(serie['2016-08-01']),col='red')
index(serie['2016-08-01'])
rect(
c(index(serie["2016-07-11"]), index(serie["2016-08-15"])),
usr[3],
c(index(serie["2016-08-03"]), index(serie["2016-09-15"])),
usr[4], col='green', border=NA)
usr <- par('usr')
rect(
c(index(serie["2016-07-11"]), index(serie["2016-08-15"])),
usr[3],
c(index(serie["2016-08-03"]), index(serie["2016-09-15"])),
usr[4], col='green', border=NA)
lines(serie)
lines(serie/serie[1])
lines(serie/serie[1],col='black')
abline(h=1)
abline(h=1.2)
runApp()
lines(serie/serie[1],col='black')
lines(serie/serie,col='black')
lines(serie/serie,col='black')
plot( serie / as.numeric(serie[1]),  type='n', main="",ylab="Price")
numeric(serie[1])
lines(serie / as.numeric(serie[1]),col='black')
plot( serie / as.numeric(serie[1]),  type='n', main="",ylab="Price")
abline(v=10)
abline(v=index(serie[1]))
abline(v=index(serie[10]))
index(serie[10])
class(index(serie[10]))
library(xts)
class(index(serie[10]))
class(serie)
class(index(serie))
index(serie)
serie
as.xts(serie)
index(as.xts(serie))
class(index(as.xts(serie)))
index(serie[1])
require(lubridate)
ymd(index(serie[1]))
class(ymd)
class(ymd(index(serie[1])))
as.POSIXct(index(serie[1]))
as.POSIXct(index(serie[20]))
abline(v=as.POSIXct(index(serie[20])))
abline(v=as.POSIXct('2016-07-01')))
abline(v=as.POSIXct('2016-07-01'))
runApp()
runApp()
setwd("~/Coding/Development/Python/ipython/quantopian/clustering")
require(xts)
require(urca)
require(Quandl)
ftse100_cont <- read.csv('FTSE100.csv')
quandl_code <- paste(rep("LSE",98), paste(as.character(ftse100_cont[,1]), rep("1", 98),sep="."), sep = '/')
start_date="2016-05-01"
USDGBP = Quandl("BOE/XUDLGBD", api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date)
USDGBP.ts = xts(USDGBP$Value,order.by = USDGBP$Date)
ftse100_price <- Quandl(quandl_code, api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date)
fill <- function(x){
if (is.na(x[5])) {
nonmissing <- tail(which(!is.na(x)),1)
ifelse(length(nonmissing),x[nonmissing],NA)
}
else {
x[5]
}
}
isError <- function (name) {
!grepl("ERROR", name)
}
validCol <- sapply(colnames(ftse100_price), isError)
tickers <- paste(as.character(ftse100_cont[,1]))[validCol[-1]][-60]
ftse100_price <- ftse100_price[, validCol]
ftse100_price[["LSE.REX - Price"]] <- NULL
ftse100_price[["LSE.AGK - Price"]] <- NULL
ftse100_price[["LSE.MRO - Price"]] <- NULL
ftse100_price[["LSE.RDSA - Price"]] <- NULL
ftse100_price[["LSE.PFC - Price"]] <- NULL
ftse100_price[["LSE.ARM - Price"]] <- NULL
ftse100_price[["LSE.BP - Price"]] <- NULL
ftse100_price[["LSE.AZN - Price"]] <- NULL
ftse100_price[["LSE.CPI - Price"]] <- NULL
ftse100_price[["LSE.TSCO - Price"]] <- NULL
ftse100_price[["LSE.RR - Price"]] <- NULL
ftse100_price[["LSE.SAB - Price"]] <- NULL
ftse100_price[["LSE.SSE - Price"]] <- NULL
ftse100_price.xts <- xts(ftse100_price[,-1], order.by=ftse100_price[,1])
for (c in 1:dim(ftse100_price.xts)[2]) {
ftse100_price.xts[, c] <- rollapply(ftse100_price.xts[, c], 5, fill)
}
ftse100_price.xts <- ftse100_price.xts[complete.cases(ftse100_price.xts),]
ftse100_price
ftse100_price <- Quandl(quandl_code, api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date)
ftse100_price
ftse100_price <- Quandl(quandl_code, api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date)
fill <- function(x){
if (is.na(x[5])) {
nonmissing <- tail(which(!is.na(x)),1)
ifelse(length(nonmissing),x[nonmissing],NA)
}
else {
x[5]
}
}
isError <- function (name) {
!grepl("ERROR", name)
}
validCol <- sapply(colnames(ftse100_price), isError)
tickers <- paste(as.character(ftse100_cont[,1]))[validCol[-1]][-60]
ftse100_price <- ftse100_price[, validCol]
ftse100_price[["LSE.REX - Price"]] <- NULL
ftse100_price[["LSE.AGK - Price"]] <- NULL
ftse100_price[["LSE.MRO - Price"]] <- NULL
ftse100_price[["LSE.RDSA - Price"]] <- NULL
ftse100_price[["LSE.PFC - Price"]] <- NULL
ftse100_price[["LSE.ARM - Price"]] <- NULL
ftse100_price[["LSE.BP - Price"]] <- NULL
ftse100_price[["LSE.AZN - Price"]] <- NULL
ftse100_price[["LSE.CPI - Price"]] <- NULL
ftse100_price[["LSE.TSCO - Price"]] <- NULL
ftse100_price[["LSE.RR - Price"]] <- NULL
ftse100_price[["LSE.SAB - Price"]] <- NULL
ftse100_price[["LSE.SSE - Price"]] <- NULL
ftse100_price.xts <- xts(ftse100_price[,-1], order.by=ftse100_price[,1])
for (c in 1:dim(ftse100_price.xts)[2]) {
ftse100_price.xts[, c] <- rollapply(ftse100_price.xts[, c], 5, fill)
}
ftse100_price.xts <- ftse100_price.xts[complete.cases(ftse100_price.xts),]
saveRDS(ftse100_price.xts,'FTSE100XTS.RData')
setwd("~/Desktop/qrm/html/dtw/DtwApp")
saveRDS(ftse100_price.xts,'FTSE100XTS.RData')
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste('cluster',1,'.md')
paste('cluster',1,'.md',sep="")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ftse100_cont <- read.csv('FTSE100.csv')
quandl_code <- paste(rep("LSE",98), paste(as.character(ftse100_cont[,1]), rep("1", 98),sep="."), sep = '/')
start_date="2016-05-01"
end_date="2016-10-07"
ftse100_price <- Quandl(quandl_code, api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date, end_date=end_date)
require(xts)
require(urca)
require(Quandl)
ftse100_price <- Quandl(quandl_code, api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date, end_date=end_date)
ftse100_price <- readRDS('FTSE100Price.RData')
fill <- function(x){
if (is.na(x[5])) {
nonmissing <- tail(which(!is.na(x)),1)
ifelse(length(nonmissing),x[nonmissing],NA)
}
else {
x[5]
}
}
!grepl("ERROR", name)
}
isError <- function (name) {
validCol <- sapply(colnames(ftse100_price), isError)
tickers <- paste(as.character(ftse100_cont[,1]))[validCol[-1]][-60]
ftse100_price <- ftse100_price[, validCol]
ftse100_price[["LSE.REX - Price"]] <- NULL
ftse100_price[["LSE.MRO - Price"]] <- NULL
ftse100_price[["LSE.AGK - Price"]] <- NULL
ftse100_price[["LSE.RDSA - Price"]] <- NULL
ftse100_price[["LSE.PFC - Price"]] <- NULL
ftse100_price[["LSE.ARM - Price"]] <- NULL
ftse100_price[["LSE.CPI - Price"]] <- NULL
ftse100_price[["LSE.RR - Price"]] <- NULL
ftse100_price[["LSE.AZN - Price"]] <- NULL
ftse100_price[["LSE.TSCO - Price"]] <- NULL
ftse100_price[["LSE.SSE - Price"]] <- NULL
ftse100_price[["LSE.BP - Price"]] <- NULL
ftse100_price[["LSE.SAB - Price"]] <- NULL
ftse100_price.xts <- xts(ftse100_price[,-1], order.by=ftse100_price[,1])
for (c in 1:dim(ftse100_price.xts)[2]) {
ftse100_price.xts[, c] <- rollapply(ftse100_price.xts[, c], 5, fill)
}
ftse100_price.xts <- ftse100_price.xts[complete.cases(ftse100_price.xts),]
ftse100_price <- Quandl(quandl_code, api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date, end_date=end_date)
}
ftse100_price <- Quandl(quandl_code, api_key="ztWex4DbrD4CVMdSvbcx", start_date=start_date, end_date=end_date)
saveRDS(ftse100_price,'FTSE100Price.RData')
fill <- function(x){
if (is.na(x[5])) {
nonmissing <- tail(which(!is.na(x)),1)
ifelse(length(nonmissing),x[nonmissing],NA)
}
else {
x[5]
}
}
isError <- function (name) {
!grepl("ERROR", name)
}
validCol <- sapply(colnames(ftse100_price), isError)
tickers <- paste(as.character(ftse100_cont[,1]))[validCol[-1]][-60]
ftse100_price <- ftse100_price[, validCol]
ftse100_price[["LSE.REX - Price"]] <- NULL
ftse100_price[["LSE.AGK - Price"]] <- NULL
ftse100_price[["LSE.MRO - Price"]] <- NULL
ftse100_price[["LSE.RDSA - Price"]] <- NULL
ftse100_price[["LSE.PFC - Price"]] <- NULL
ftse100_price[["LSE.ARM - Price"]] <- NULL
ftse100_price[["LSE.BP - Price"]] <- NULL
ftse100_price[["LSE.AZN - Price"]] <- NULL
ftse100_price[["LSE.CPI - Price"]] <- NULL
ftse100_price[["LSE.TSCO - Price"]] <- NULL
ftse100_price[["LSE.RR - Price"]] <- NULL
ftse100_price[["LSE.SAB - Price"]] <- NULL
ftse100_price[["LSE.SSE - Price"]] <- NULL
ftse100_price.xts <- xts(ftse100_price[,-1], order.by=ftse100_price[,1])
for (c in 1:dim(ftse100_price.xts)[2]) {
ftse100_price.xts[, c] <- rollapply(ftse100_price.xts[, c], 5, fill)
}
ftse100_price.xts <- ftse100_price.xts[complete.cases(ftse100_price.xts),]
# https://cran.r-project.org/web/packages/dtwclust/README.html
whichpart <- function(x, n=6) {
nx <- length(x)
p <- nx-n
xp <- sort(-x, partial=p)[p]
which(-x > xp)
}
require(xts)
require(dtwclust)
## Load data
prices <- as.data.frame(ftse100_price.xts)
datalist.prices <- zscore(prices)
saveRDS(ftse100_price.xts,'FTSE100XTS.RData')
ctrl <- new("dtwclustControl", window.size = 5L, trace = TRUE)
ctrl@pam.precompute <- FALSE
kc.prices <- dtwclust(data = datalist.prices, k = 5, distance = "dtw_lb",
centroid = "pam", seed = 3247,
control = ctrl)
plot(kc.prices)
kc.prices <- dtwclust(data = datalist.prices, k = 5, distance = "dtw_lb",
centroid = "pam", seed = 123,
control = ctrl)
plot(kc.prices)
kc.prices <- dtwclust(data = datalist.prices, k = 5, distance = "dtw_lb",
centroid = "pam", seed = 1,
control = ctrl)
plot(kc.prices)
kc.prices <- dtwclust(data = datalist.prices, k = 20, distance = "dtw_lb",
centroid = "pam", seed = 1,
control = ctrl)
plot(kc.prices)
kc.prices <- dtwclust(data = datalist.prices, k = 5, distance = "dtw_lb",
centroid = "pam", seed = 1,
control = ctrl)
plot(kc.prices)
model <- kc.prices
clusters <- list()
for(i in 1:5) {
D.dtw <- proxy::dist(model@centroids[i], model@datalist[model@cluster==i], method = "DTW",
window.type = "slantedband", window.size = 5)
topmems.prices <- colnames(D.dtw)[order(D.dtw)]
# inspect all
par(mfrow=c(2,3))
if(length(topmems.prices) > 5) {
topfive.prices <- topmems.prices[1:5]
} else {
topfive.prices <- topmems.prices
}
if(length(topmems.prices) > 10) {
topten.prices <- topmems.prices[1:10]
} else {
topten.prices <- topmems.prices
}
clusters[[i]] <- list()
clusters[[i]][['topfive']] <- topfive.prices
clusters[[i]][['topten']] <- topten.prices
for(nm in topten.prices) {
#for(nm in colnames(D.dtw)) {
plot(ftse100_price.xts[,nm], main=nm,xlab=i)
}
print('=======================')
}
clusters[[1]]
ftse100_price[["LSE.RRS - Price"]] <- NULL
ftse100_price[["LSE.FRES - Price"]] <- NULL
ftse100_price.xts <- xts(ftse100_price[,-1], order.by=ftse100_price[,1])
for (c in 1:dim(ftse100_price.xts)[2]) {
ftse100_price.xts[, c] <- rollapply(ftse100_price.xts[, c], 5, fill)
}
ftse100_price.xts <- ftse100_price.xts[complete.cases(ftse100_price.xts),]
whichpart <- function(x, n=6) {
nx <- length(x)
p <- nx-n
xp <- sort(-x, partial=p)[p]
which(-x > xp)
}
require(xts)
require(dtwclust)
## Load data
prices <- as.data.frame(ftse100_price.xts)
datalist.prices <- zscore(prices)
ctrl <- new("dtwclustControl", window.size = 5L, trace = TRUE)
ctrl@pam.precompute <- FALSE
kc.prices <- dtwclust(data = datalist.prices, k = 5, distance = "dtw_lb",
centroid = "pam", seed = 1,
control = ctrl)
plot(kc.prices)
clusters[[1]]
model <- kc.prices
clusters <- list()
for(i in 1:5) {
D.dtw <- proxy::dist(model@centroids[i], model@datalist[model@cluster==i], method = "DTW",
window.type = "slantedband", window.size = 5)
topmems.prices <- colnames(D.dtw)[order(D.dtw)]
# inspect all
par(mfrow=c(2,3))
if(length(topmems.prices) > 5) {
topfive.prices <- topmems.prices[1:5]
} else {
topfive.prices <- topmems.prices
}
if(length(topmems.prices) > 10) {
topten.prices <- topmems.prices[1:10]
} else {
topten.prices <- topmems.prices
}
clusters[[i]] <- list()
clusters[[i]][['topfive']] <- topfive.prices
clusters[[i]][['topten']] <- topten.prices
for(nm in topten.prices) {
#for(nm in colnames(D.dtw)) {
plot(ftse100_price.xts[,nm], main=nm,xlab=i)
}
print('=======================')
}
clusters[[4]]
prices <- readRDS('FTSE100XTS.RData')
prices
prices['/2016-10']
as.xts(prices)
library(xts)
as.xts(prices)
as.xts(prices)['/2016-10']
as.xts(prices)['/2016-10-07']
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
