summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
require(urca)
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2015)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2016)
require(urca)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train.2015)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.log.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train.2015)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[1,]%*%t(TSAlign.log.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train.2015)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.log.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.train.2015 = (TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.train.2015)))
plot(residual.2015)
TSAlign.train.2016 = (TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
m.2016@V[,1]
m.2015@V[,1]
TSAlign.train.2015 = (TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,1]%*%t(TSAlign.train.2015)))
plot(residual.2015)
TSAlign.train.2016 = (TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.train.2015 = (TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.train.2015)))
plot(residual.2015)
TSAlign.train.2016 = (TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
m.2015@V[,2]
m.2016@V[,1]
residual.2015 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2015)))
plot(residual.2015)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
residual.2016 <- as.xts(t(m.2015@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
residual.2016 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.train.2016)))
plot(residual.2016)
residual.2015 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.train.2015)))
plot(residual.2015)
residual.2016 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.train.2016)))
plot(residual.2016)
m.2016@V[,2]
m.2016@V[,`]
we
sdasdfa
dsafasfdds
*
))
dsfasdfsdfe4[-df'e']
dfsd
fda
sfs
fd"""
shiny::runApp('App')
install.packages("shinyjs")
else if (input$preset == 2){
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
m.june
m
m.feb
summay(m.june)
summary(m.june)
glob_mean.2016
m.2016
source('~/Coding/Development/Python/ipython/quantopian/similarity/App/init.R')
m.june
summary(m.june)
source('~/Coding/Development/Python/ipython/quantopian/similarity/App/init.R')
m.june
m.june@teststat
summary(m.june)
slotNames(summary(m.june))
summary(m.june)@V
summary(m.june)@teststat
summary(m.june)@testreg
sm <- summary(DATA$ids)
sm <- summary(m.june)
sm
attributes(sm)
sm <- capture.output(summary(m.june))
sm
capture.output(summary(m.june))[11:22]
sm <- capture.output(summary(m.june))[11:22]
sm
paste(sm,collapse = '\n')
shiny::runApp('App')
shiny::runApp('App')
summary(c(1))
shiny::runApp('App')
methods(summary)
m.june
head(res)
head(residual.pre.feb)
head(m.feb)
m.feb
type(m.feb)
typeof(m.feb)
m.feb@V
print(m.feb)
attributes(m.feb)
typeof(m.june)
getSlots(m.june)
slotNames(m.june)
showMethods("summary")
showMethods("print")
showMethods("summary")
getMethods("summary",'ca.jo')
getMethod("summary", signature="ca.jo)
<
)
""
"
getMethod("summary", signature="ca.jo")
getMethod("print", signature="ca.jo")
print.ca.jo
summary.ca.jo
?summary
showMethods(classes="ca.jo")
getMethods(classes="ca.jo")
getMethods('summary',classes="ca.jo")
getMethods('summary',object="ca.jo")
methods(summary)
summary.glm
showMethods("summary")
getMethod("summary","ca.jo")
getMethod("summary","numeric")
class(ca.jo)
class(m.june)
method?summary
method?print
method?print("ca.jo")
getMethod("summary","numeric")
getMethod("summary","ca.jo")
getMethod("summary","urca")
shiny::runApp('App')
m.june
setwd("~/Coding/Development/Python/ipython/quantopian")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='cpruksa',
token='03611D78A7EB40AF5EFF3E9DFEB4942A',
secret='iWOQjC5+QGMl9bjAcQiQcf/sdw9SuiWOTLWKw3Ti')
rsconnect::setAccountInfo(name='cpruksa',token='03611D78A7EB40AF5EFF3E9DFEB4942A',secret='iWOQjC5+QGMl9bjAcQiQcf/sdw9SuiWOTLWKw3Ti)
''
'
rsconnect::setAccountInfo(name='cpruksa',token='03611D78A7EB40AF5EFF3E9DFEB4942A',secret='iWOQjC5+QGMl9bjAcQiQcf/sdw9SuiWOTLWKw3Ti')
install.packages('rsconnect')
install.packages('rsconnect', type='source')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='cpruksa',token='03611D78A7EB40AF5EFF3E9DFEB4942A',secret='iWOQjC5+QGMl9bjAcQiQcf/sdw9SuiWOTLWKw3Ti')
setwd("~/Coding/Development/Python/ipython/quantopian/similarity/App")
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('App')
library(rsconnect)
rsconnect::deployApp('./App')
setwd("~/Coding/Development/Python/ipython/quantopian/similarity")
library(rsconnect)
rsconnect::deployApp('App')
library(rsconnect)
rsconnect::deployApp('PairTradeApp')
shiny::runApp('PairTradeApp')
shiny::runApp('PairTradeApp')
shiny::runApp('PairTradeApp')
shiny::runApp('PairTradeApp')
shiny::runApp('PairTradeApp')
ls
rsconnect::deployApp('PairTradeApp')
rsconnect::deployApp('PairTradeApp')
rsconnect::deployApp('PairTradeApp')
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
setwd("~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp")
setwd("~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp")
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
shiny::runApp()
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
shiny::runApp()
shiny::runApp()
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
shiny::runApp()
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
shiny::runApp()
source('~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp/precompute.R')
shiny::runApp()
setwd("~/Coding/Development/Python/ipython/quantopian/similarity/PairTradeApp")
require(xts)
require(Quandl)
USDGBP = Quandl("BOE/XUDLGBD", api_key="ztWex4DbrD4CVMdSvbcx")
USDGBP.ts = xts(USDGBP$Value,order.by = USDGBP$Date)
GSK.all = Quandl("LSE/GSK", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
estReport <- function(model) {
test <- cbind(round(model@teststat,2), model@cval)
colnames(test)[1] <- 'test'
test <- capture.output(print(test))
eigen <- c('beta=',capture.output(print(model@V)))
paste(paste(test,collapse = '\n'),paste(eigen,collapse = '\n'), sep="\n\n")
}
fill <- function(x){
if (is.na(x[5])) {
nonmissing <- tail(which(!is.na(x)),1)
ifelse(length(nonmissing),x[nonmissing],NA)
}
else {
x[5]
}
}
TSAlign[,1] <- rollapply(TSAlign[,1],5,fill)
TSAlign[,2] <- rollapply(TSAlign[,2],5,fill)
require(urca)
month.end <- endpoints(TSAlign, on = "months")
monthly <- period.apply(TSAlign, INDEX = month.end, FUN = last)
head(monthly, 5)
plot(monthly)
plot(monthly[,1])
plot(monthly[,2])
plot(monthly[,1])
lines(monthly[,2])
par(mfrow=c(2,1))
plot(monthly[,1])
plot(monthly[,2])
model = ca.jo(log(monthly))
summary(model)
model@V%*%t(log(monthly))
omega <- model@V%*%t(log(monthly))
plot(omega)
omega
head(omega)
apply[1,]
omega[1,]
omega[,1]
omega[,2]
omega[,3]
omega <- t(omega)
head(omega)
complete.cases(omega)
omega[complete.cases(omega),]
omega <- omega[complete.cases(omega),]
plot(omega)
model@V
omega <- model@V%*%t(log(monthly))
omega <- omega[,1]
omega <- omega[!is.NA(omega)]
omega <- omega[!is.na(omega)]
omega
omega <- model@V%*%t(log(monthly))
omega <- omega[,1]
omega
omega <- model@V%*%t(log(monthly))
model@V
omega <- model@V[,1]%*%t(log(monthly))
omega <- omega[!is.na(omega)]
head(omega)
plot(omega)
TSAlign.brexit = (TSAlign['2016-06/',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TTSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
summary(mm.brexit)
summary(m.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-07/',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-06/',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-05',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06-27',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06-24',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06-23',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06-30',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06-29',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06-28',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-01/2016-06-27',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
residual.brexit <- as.xts(t(m.brexit@V[,2]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/ARM", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/ULVR", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/HSBA", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/VOD", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
GSK.all = Quandl("LSE/MKS", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
USDGBP = Quandl("BOE/XUDLGBD", api_key="ztWex4DbrD4CVMdSvbcx")
USDGBP.ts = xts(USDGBP$Value,order.by = USDGBP$Date)
GSK.all = Quandl("LSE/TSCO", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
TSAlign.brexit = (TSAlign['2016-05/2016-07',])
m.brexit  = ca.jo(log(TSAlign.brexit))
summary(m.brexit) # promising
residual.brexit <- as.xts(t(m.brexit@V[,1]%*%t(log(TSAlign.brexit))))
glob_mean.brexit <- mean(residual.brexit)
glob_sd.brexit <- sd(residual.brexit)
plot(residual.brexit)
install.packages('dtwclust')
install.packages('dtwclust',type='source')
install.packages('dtwclust')
install.packages("dtwclust")
