source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
source('~/Desktop/demon/compile.R')
Sys.setenv(PATH = paste("/usr/local/bin", Sys.getenv("PATH"), sep=":"))
1:10
rx = 1:10
ry = c(1,6,8,7,10,9,3,5,2,4)
corr(rx,ry)
cor(rx,ry)
install.packages("devtools")
devtools::install_github("twitter/BreakoutDetection")
library(BreakoutDetection)
data(Scribe)
res = breakout(Scribe, min.size=24, method='multi', beta=.001, degree=1, plot=TRUE)
res$plot
help(breakout)
X = matrix(1:6,nrow=2)
X
X = matrix(1:6,nrow=2,byrow = TRUE)
X
X = matrix(1:6,nrow=2,byrow = TRUE) %*% matrix(1:6,nrow=2,byrow = FALSE)
X = matrix(1:6,nrow=2,byrow = TRUE) %*% matrix(1:6,nrow=3,byrow = FALSE)
matrix(1:6,nrow=3,byrow = FALSE)
X = matrix(1:6,nrow=2,byrow = TRUE) %*% matrix(1:6,nrow=3,byrow = TRUE)
matrix(1:6,nrow=3,byrow = TRUE)
matrix(1:6,nrow=2,byrow = TRUE)
X
Y = matrix(1:3,nrow=3,byrow = TRUE) %*% matrix(1:3,nrow=1,byrow = TRUE)
Y
remove.packages("bsts")
installed.packages("bsts")
install.packages("bsts")
remove.packages("bsts")
install.packages("bsts", type="source")
setwd("~/Desktop/demon")
setwd("~/Coding/Development/Python/ipython/quantopian/dtw")
library(bsts)
remove.packages("Boom")
install.packages("Boom", type="source")
require(xts)
require(Quandl)
USDGBP = Quandl("BOE/XUDLGBD", api_key="ztWex4DbrD4CVMdSvbcx")
USDGBP.ts = xts(USDGBP$Value,order.by = USDGBP$Date)
GSK.all = Quandl("LSE/GSK", api_key="ztWex4DbrD4CVMdSvbcx")
GSK.price.ts = xts(GSK.all$Price,order.by = GSK.all$Date)
TSAlign = merge.xts(USDGBP.ts, GSK.price.ts)
names(TSAlign) <- c("USDGBP","GSK")
fill <- function(x){
if (is.na(x[5])) {
nonmissing <- tail(which(!is.na(x)),1)
ifelse(length(nonmissing),x[nonmissing],NA)
}
else {
x[5]
}
}
TSAlign.log <- xts(log(rollapply(TSAlign[,1],5,fill)), log(rollapply(TSAlign[,2],5,fill)))
TSAlign.log <- xts(log(rollapply(TSAlign[,1],5,fill)), log(rollapply(TSAlign[,2],5,fill)), order.by = TSAlign.index)
TSAlign.log <- merge(log(rollapply(TSAlign[,1],5,fill)), log(rollapply(TSAlign[,2],5,fill)), order.by = TSAlign.index)
TSAlign.log <- merge(log(rollapply(TSAlign[,1],5,fill)), log(rollapply(TSAlign[,2],5,fill)))
View(TSAlign.log)
View(TSAlign.log)
TSAlign.train = TSAlign['2014-01-01/2015-11-30',]
m = co.jo(TSAlign.train)
require(urca)
m = co.jo(TSAlign.train)
m = ca.jo(TSAlign.train)
summary(m)
TSAlign[,2] <- rollapply(TSAlign[,2],5,fill)
TSAlign.log.train = log(TSAlign['2014-01-01/2015-11-30',])
require(urca)
m = ca.jo(TSAlign.train)
summary(m)
m
m.args
slot(m)
args(m)
attributes(m)
names(attributes(m))
m.x
m$x
m@x
m@cval
m@bp
m@Z0
m@Z1
head(m@Z1)
head(m@Z0)
slotNames(m)
m@P
m@ecdet
m@V
m@V[,2]
TSAlign.log.train
t(TSAlign.log.train)
m@V[,2]%*%t(TSAlign.log.train)
plot(m@V[,2]%*%t(TSAlign.log.train))
plot(t(m@V[,2]%*%t(TSAlign.log.train)))
t(m@V[,2]%*%t(TSAlign.log.train))
head(t(m@V[,2]%*%t(TSAlign.log.train)))
residual <- t(m@V[,2]%*%t(TSAlign.log.train))
TSAlign.log.train = log(TSAlign['2014-01-01/',])
require(urca)
m = ca.jo(TSAlign.train)
summary(m)
residual <- t(m@V[,2]%*%t(TSAlign.log.train))
plot(residual)
typeof(residual)
typeof(TSAlign)
residual['2016/']
residual['2016']
xts(residual['2016'])
xts(residual['2016'],order.by = index(residual))
xts(residual['2016'],order.by = as.Date(index(residual)))
par(mfrow=c(2,1))
TSAlign.log.train = log(TSAlign['2014-01-01/2015-12-01',])
require(urca)
m = ca.jo(TSAlign.train)
summary(m)
residual <- t(m@V[,2]%*%t(TSAlign.log.train))
plot(residual)
TSAlign.log.train = log(TSAlign['2014-01-01/',])
require(urca)
m = ca.jo(TSAlign.train)
summary(m)
residual <- t(m@V[,2]%*%t(TSAlign.log.train))
plot(residual)
plot(residual[600:700])
as.xts(residual)
plot(as.xts(residual))
TSAlign.log.train = log(TSAlign['2014-01-01/2015-12-31',])
require(urca)
m = ca.jo(TSAlign.train)
summary(m)
residual.2015 <- t(m@V[,2]%*%t(TSAlign.log.train))
plot(residual.2015)
residual.2015 <- as.xts(t(m@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2015)
TSAlign.log.train = log(TSAlign['2014-01-01/2015-12-31',])
require(urca)
m.2015 = ca.jo(TSAlign.train)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
require(urca)
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2015)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.log.train)))
plot(residual.2016)
require(urca)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train.2015)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.log.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train.2015)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[1,]%*%t(TSAlign.log.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.log.train.2015 = log(TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.log.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.log.train.2015)))
plot(residual.2015)
TSAlign.log.train.2016 = log(TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.log.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.log.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.train.2015 = (TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.train.2015)))
plot(residual.2015)
TSAlign.train.2016 = (TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
m.2016@V[,1]
m.2015@V[,1]
TSAlign.train.2015 = (TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,1]%*%t(TSAlign.train.2015)))
plot(residual.2015)
TSAlign.train.2016 = (TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
require(urca)
TSAlign.train.2015 = (TSAlign['2014-01-01/2015-12-31',])
m.2015 = ca.jo(TSAlign.train.2015)
summary(m.2015)
residual.2015 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.train.2015)))
plot(residual.2015)
TSAlign.train.2016 = (TSAlign['2014-01-01/',])
m.2016  = ca.jo(TSAlign.train.2016)
summary(m.2016)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
m.2015@V[,2]
m.2016@V[,1]
residual.2015 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2015)))
plot(residual.2015)
residual.2016 <- as.xts(t(m.2016@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
residual.2016 <- as.xts(t(m.2015@V[,1]%*%t(TSAlign.train.2016)))
plot(residual.2016)
residual.2016 <- as.xts(t(m.2015@V[,2]%*%t(TSAlign.train.2016)))
plot(residual.2016)
residual.2015 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.train.2015)))
plot(residual.2015)
residual.2016 <- as.xts(t(m.2016@V[,2]%*%t(TSAlign.train.2016)))
plot(residual.2016)
m.2016@V[,2]
m.2016@V[,`]
we
sdasdfa
dsafasfdds
*
))
dsfasdfsdfe4[-df'e']
dfsd
fda
sfs
fd"""
shiny::runApp('App')
install.packages("shinyjs")
else if (input$preset == 2){
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
shiny::runApp('App')
m.june
m
m.feb
summay(m.june)
summary(m.june)
glob_mean.2016
m.2016
source('~/Coding/Development/Python/ipython/quantopian/similarity/App/init.R')
m.june
summary(m.june)
source('~/Coding/Development/Python/ipython/quantopian/similarity/App/init.R')
m.june
m.june@teststat
summary(m.june)
slotNames(summary(m.june))
summary(m.june)@V
summary(m.june)@teststat
summary(m.june)@testreg
sm <- summary(DATA$ids)
sm <- summary(m.june)
sm
attributes(sm)
sm <- capture.output(summary(m.june))
sm
capture.output(summary(m.june))[11:22]
sm <- capture.output(summary(m.june))[11:22]
sm
paste(sm,collapse = '\n')
shiny::runApp('App')
shiny::runApp('App')
summary(c(1))
shiny::runApp('App')
methods(summary)
m.june
head(res)
head(residual.pre.feb)
head(m.feb)
m.feb
type(m.feb)
typeof(m.feb)
m.feb@V
print(m.feb)
attributes(m.feb)
typeof(m.june)
getSlots(m.june)
slotNames(m.june)
showMethods("summary")
showMethods("print")
showMethods("summary")
getMethods("summary",'ca.jo')
getMethod("summary", signature="ca.jo)
<
)
""
"
getMethod("summary", signature="ca.jo")
getMethod("print", signature="ca.jo")
print.ca.jo
summary.ca.jo
?summary
showMethods(classes="ca.jo")
getMethods(classes="ca.jo")
getMethods('summary',classes="ca.jo")
getMethods('summary',object="ca.jo")
methods(summary)
summary.glm
showMethods("summary")
getMethod("summary","ca.jo")
getMethod("summary","numeric")
class(ca.jo)
class(m.june)
method?summary
method?print
method?print("ca.jo")
getMethod("summary","numeric")
getMethod("summary","ca.jo")
getMethod("summary","urca")
shiny::runApp('App')
m.june
setwd("~/Coding/Development/Python/ipython/quantopian/similarity/App")
shiny::runApp()
start.est.IS <- ymd('2012-01-01')
end.est.IS <- ymd('2016-09-30')
list[model.IS, relvec.IS, residual.est.IS, glob_mean.IS, glob_sd.IS] <- estimationCalc( start.est.IS, end.est.IS)
list[TSAlign.position.IS.feb, residual.position.IS.feb] <- positionCalc(entry.feb, exit.feb, relvec.IS)
list[TSAlign.position.IS.june, residual.position.IS.june] <- positionCalc(entry.june, exit.june, relvec.IS)
plot(residual.est.IS, ylim=c(glob_mean.IS-2.1*glob_sd.IS, glob_mean.IS+2.1*glob_sd.IS),main="")
abline(h=glob_mean.IS,color='blue')
abline(h=glob_mean.IS+2*glob_sd.IS,col='red')
plot(residual.est.IS, ylim=c(glob_mean.IS-2.1*glob_sd.IS, glob_mean.IS+2.1*glob_sd.IS),main="")
abline(h=glob_mean.IS,col='blue')
abline(h=glob_mean.IS+2*glob_sd.IS,col='red')
model.IS@V
estReport()model.IS)
estReport(model.IS)
rmarkdown::render("Intro.Rmd")
?rmarkdown
rmarkdown::render("Intro.Rmd")
shiny::runApp()
shiny::runApp()
plot(residual.est.IS['2015-08'])
plot(residual.est.IS['2015-08'],na.rm=TRUE)
residual.est.IS['2015-08']
residual.est.IS['2015']
start.est.IS <- ymd('2012-01-01')
end.est.IS <- ymd('2016-09-30')
list[model.IS, relvec.IS, residual.est.IS, glob_mean.IS, glob_sd.IS] <- estimationCalc( start.est.IS, end.est.IS)
list[TSAlign.position.IS.feb, residual.position.IS.feb] <- positionCalc(entry.feb, exit.feb, relvec.IS)
list[TSAlign.position.IS.june, residual.position.IS.june] <- positionCalc(entry.june, exit.june, relvec.IS)
residual.est.IS['2015']
residual.est.IS['2015-08']
plot(residual.est.IS['2015-08'])
plot(residual.est.IS['2015-08/2016'])
rmarkdown::render("Intro.Rmd")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/.active-rstudio-document')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rmarkdown::render("Intro.Rmd")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/.active-rstudio-document')
shiny::runApp()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/.active-rstudio-document')
shiny::runApp()
source('~/.active-rstudio-document')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/.active-rstudio-document')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
